generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Patient {
    id          String   @id @default(cuid())
    name        String
    age         Int
    gender      String
    address     String
    phone       String
    email       String?   @unique
    admitted    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    appointments Appointment[]
    medicalRecords MedicalRecord[]

    Billing Billing[]
}

model Doctor {
    id          String   @id @default(cuid())
    name        String
    specialty   String
    phone       String
    email       String?   @unique
    available   Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    appointments Appointment[]
    schedules    Schedule[]
}

model Appointment {
    id          String   @id @default(cuid())
    patientId   String
    doctorId    String
    time        DateTime
    status      String    @default("Scheduled") // e.g., Scheduled, Completed, Cancelled
    notes       String?

    patient     Patient   @relation(fields: [patientId], references: [id])
    doctor      Doctor    @relation(fields: [doctorId], references: [id])
}

model MedicalRecord {
    id          String   @id @default(cuid())
    patientId   String
    diagnosis   String
    treatment   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    patient     Patient   @relation(fields: [patientId], references: [id])
}

model Schedule {
    id          String   @id @default(cuid())
    doctorId    String
    day         String    // e.g., Monday, Tuesday
    startTime   DateTime
    endTime     DateTime

    doctor      Doctor    @relation(fields: [doctorId], references: [id])
}

model Room {
    id          String   @id @default(cuid())
    roomNumber  String    @unique
    type        String    // e.g., General, ICU, Operation Theater
    status      String    @default("Available") // e.g., Available, Occupied, Maintenance
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Billing {
    id          String   @id @default(cuid())
    patientId   String
    amount      Float
    status      String    @default("Pending") // e.g., Pending, Paid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    patient     Patient   @relation(fields: [patientId], references: [id])
}

model Staff {
    id          String   @id @default(cuid())
    name        String
    role        String    // e.g., Nurse, Receptionist, Technician
    phone       String
    email       String?   @unique
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}